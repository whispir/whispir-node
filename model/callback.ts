/**
 * Whispir Platform API
 * Whispir Platform API for cross channel and multi channel communications. Documentation on each endpoint is available at https://developers.whispir.com.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@whispir.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { CallbackAuth } from './callbackAuth';
import { CallbackCallbacks } from './callbackCallbacks';
import { LinkInner } from './linkInner';

/**
* The callback object, used to configure the callback (also known as webhook).
*/
export class Callback {
    /**
    * The id of the callback.   This is the value that should be passed when referring to the callback using the API endpoints
    */
    'id'?: string;
    /**
    * The name of the callback.   This is the value that should be passed in the message payload for triggering the callbacks
    */
    'name': string;
    /**
    * Specifies the service URL that API Callbacks should be forwarded to.
    */
    'url': string;
    'auth': CallbackAuth;
    /**
    * Specifies the content type that should be sent to this endpoint.
    */
    'contentType': Callback.ContentTypeEnum;
    /**
    * Specifies whether HTML should be stripped from responses.
    */
    'removeHTML': Callback.RemoveHTMLEnum = Callback.RemoveHTMLEnum.Disabled;
    /**
    * Specifies whether Whispir should perform retries in the event there is a failure accessing the callback service.
    */
    'retriesEnabled': boolean = false;
    /**
    * Whispir notify this email address that a callback has failed (only when retries are disabled).   The email will contain the details of the callback content.
    */
    'email': string;
    'callbacks': CallbackCallbacks;
    /**
    * A [HATEOAS](https://en.wikipedia.org/wiki/HATEOAS) link object, describing all discoverable resources in relation to the original request.
    */
    'link'?: Array<LinkInner>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        },
        {
            "name": "auth",
            "baseName": "auth",
            "type": "CallbackAuth"
        },
        {
            "name": "contentType",
            "baseName": "contentType",
            "type": "Callback.ContentTypeEnum"
        },
        {
            "name": "removeHTML",
            "baseName": "removeHTML",
            "type": "Callback.RemoveHTMLEnum"
        },
        {
            "name": "retriesEnabled",
            "baseName": "retriesEnabled",
            "type": "boolean"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "callbacks",
            "baseName": "callbacks",
            "type": "CallbackCallbacks"
        },
        {
            "name": "link",
            "baseName": "link",
            "type": "Array<LinkInner>"
        }    ];

    static getAttributeTypeMap() {
        return Callback.attributeTypeMap;
    }
}

export namespace Callback {
    export enum ContentTypeEnum {
        Json = <any> 'json',
        Xml = <any> 'xml'
    }
    export enum RemoveHTMLEnum {
        Enabled = <any> 'enabled',
        Disabled = <any> 'disabled'
    }
}
