/**
 * Whispir Platform API
 * Whispir Platform API for cross channel and multi channel communications. Documentation on each endpoint is available at https://developers.whispir.com.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@whispir.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { EventEventFormListInner } from './eventEventFormListInner';
import { LinkInner } from './linkInner';

/**
* The event object.
*/
export class Event {
    /**
    * Id of the event
    */
    'id'?: string;
    /**
    * Specifies the name of the label used for the messages sent under this event. This needs to match with the name of the event templates available
    */
    'eventLabel': string;
    /**
    * Specifies the status of the event. The status can be one of <ul><li>Active</li><li>Resolved<l></ul>Note:The default status is Open.
    */
    'status': Event.StatusEnum = Event.StatusEnum.Open;
    /**
    * Event form list
    */
    'eventFormList'?: Array<EventEventFormListInner>;
    /**
    * A [HATEOAS](https://en.wikipedia.org/wiki/HATEOAS) link object, describing all discoverable resources in relation to the original request.
    */
    'link'?: Array<LinkInner>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "eventLabel",
            "baseName": "eventLabel",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "Event.StatusEnum"
        },
        {
            "name": "eventFormList",
            "baseName": "eventFormList",
            "type": "Array<EventEventFormListInner>"
        },
        {
            "name": "link",
            "baseName": "link",
            "type": "Array<LinkInner>"
        }    ];

    static getAttributeTypeMap() {
        return Event.attributeTypeMap;
    }
}

export namespace Event {
    export enum StatusEnum {
        Open = <any> 'Open',
        Active = <any> 'Active',
        Resolved = <any> 'Resolved'
    }
}
